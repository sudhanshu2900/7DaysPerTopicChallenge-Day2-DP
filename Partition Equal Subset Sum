PROBLEM: Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

            Input: N = 4
            arr = {1, 5, 11, 5}
            Output: YES
            Explaination: 
            The two parts are {1, 5, 5} and {11}.





SOLUTION:

bool partEqlSubsetSum(int N, int arr[], int s){
        bool t[N+1][s+1];
        
        for(int i=0; i<N+1; i++){
            for(int j=0;j<=s;j++){
                if(i==0) t[i][j] = false;
                if(j==0) t[i][j] = true;
            }
        }
        
        for(int i=1; i<N+1; i++){
            for(int j=1;j<=s;j++){
                if(arr[i-1] <= j){
                    t[i][j] = t[i-1][j] || t[i-1][j-arr[i-1]];
                }
                else{
                    t[i][j] = t[i-1][j];
                }
            }
        }
        
        return t[N][s];
    }


    int equalPartition(int N, int arr[])
    {
        int sum = 0;
        for(int i=0; i<N; i++)
            sum += arr[i];
            
        if(sum%2 != 0) return false;
        else{   
            int s = sum/2;
            return partEqlSubsetSum(N, arr, s);
        }
    }
    
    
    
    
    
    
